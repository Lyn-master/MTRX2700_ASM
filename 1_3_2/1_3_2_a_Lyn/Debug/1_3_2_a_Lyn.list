
1_3_2_a_Lyn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000138  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002cc  080002cc  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002cc  080002cc  00002008  2**0
                  CONTENTS
  4 .ARM          00000000  080002cc  080002cc  00002008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002cc  080002cc  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002d0  080002d0  000012d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080002d4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00002008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000e0  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000006f  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000054  00000000  00000000  00002187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000008b  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000022eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002b4 	.word	0x080002b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080002b4 	.word	0x080002b4

080001d4 <main>:

.text

main:

LDR R1, = ascii_string    @Memory address of string
 80001d4:	490f      	ldr	r1, [pc, #60]	@ (8000214 <end_loop+0x4>)
MOV R3, #0                @ offset
 80001d6:	f04f 0300 	mov.w	r3, #0

@Define R2

MOV R2, #1
 80001da:	f04f 0201 	mov.w	r2, #1

080001de <string_loop>:

string_loop:

LDRB R4, [R1, R3]
 80001de:	5ccc      	ldrb	r4, [r1, r3]
CMP R4, #0                 @Check end of string
 80001e0:	2c00      	cmp	r4, #0
BEQ end_loop
 80001e2:	d015      	beq.n	8000210 <end_loop>

@Pass this point R4 hasn't reached end of string

@ Check if in alphabet range A = 65 B = 90 a = 97 b = 122

CMP R4, #65
 80001e4:	2c41      	cmp	r4, #65	@ 0x41
BLT next_letter
 80001e6:	db10      	blt.n	800020a <next_letter>

CMP R4, #122
 80001e8:	2c7a      	cmp	r4, #122	@ 0x7a
BGT next_letter
 80001ea:	dc0e      	bgt.n	800020a <next_letter>

CMP R4, #90
 80001ec:	2c5a      	cmp	r4, #90	@ 0x5a
BLE upper_case
 80001ee:	dd01      	ble.n	80001f4 <upper_case>

CMP R4, #97
 80001f0:	2c61      	cmp	r4, #97	@ 0x61
BGE lower_case
 80001f2:	da05      	bge.n	8000200 <lower_case>

080001f4 <upper_case>:

upper_case:

CMP R2, #0          @ Convert to lower case
 80001f4:	2a00      	cmp	r2, #0
BNE next_letter
 80001f6:	d108      	bne.n	800020a <next_letter>
ADD R4, 32          @ Add 32 to get lower case equivalent
 80001f8:	f104 0420 	add.w	r4, r4, #32
STRB R4, [R1,R3]    @ Store modification in current address
 80001fc:	54cc      	strb	r4, [r1, r3]
b next_letter
 80001fe:	e004      	b.n	800020a <next_letter>

08000200 <lower_case>:

lower_case:

CMP R2, #1          @ Convert to upper case
 8000200:	2a01      	cmp	r2, #1
BNE next_letter
 8000202:	d102      	bne.n	800020a <next_letter>
SUB R4,32           @ Subtract 32 to get upper case equivalent
 8000204:	f1a4 0420 	sub.w	r4, r4, #32
STRB R4, [R1,R3]    @ Store modification in current address
 8000208:	54cc      	strb	r4, [r1, r3]

0800020a <next_letter>:

next_letter:

@Increment and restart loop

ADD R3, #1
 800020a:	f103 0301 	add.w	r3, r3, #1
b string_loop
 800020e:	e7e6      	b.n	80001de <string_loop>

08000210 <end_loop>:


end_loop:
BX LR @ Return from main
 8000210:	4770      	bx	lr
 8000212:	0000      	.short	0x0000
LDR R1, = ascii_string    @Memory address of string
 8000214:	20000000 	.word	0x20000000

08000218 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800021c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000220:	480c      	ldr	r0, [pc, #48]	@ (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 8000222:	490d      	ldr	r1, [pc, #52]	@ (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000224:	4a0d      	ldr	r2, [pc, #52]	@ (800025c <LoopForever+0xe>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000228:	e002      	b.n	8000230 <LoopCopyDataInit>

0800022a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800022c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022e:	3304      	adds	r3, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000234:	d3f9      	bcc.n	800022a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000236:	4a0a      	ldr	r2, [pc, #40]	@ (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000238:	4c0a      	ldr	r4, [pc, #40]	@ (8000264 <LoopForever+0x16>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800023c:	e001      	b.n	8000242 <LoopFillZerobss>

0800023e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000240:	3204      	adds	r2, #4

08000242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000244:	d3fb      	bcc.n	800023e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000246:	f000 f811 	bl	800026c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024a:	f7ff ffc3 	bl	80001d4 <main>

0800024e <LoopForever>:

LoopForever:
  b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800025c:	080002d4 	.word	0x080002d4
  ldr r2, =_sbss
 8000260:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000264:	20000024 	.word	0x20000024

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <__libc_init_array>:
 800026c:	b570      	push	{r4, r5, r6, lr}
 800026e:	4d0d      	ldr	r5, [pc, #52]	@ (80002a4 <__libc_init_array+0x38>)
 8000270:	4c0d      	ldr	r4, [pc, #52]	@ (80002a8 <__libc_init_array+0x3c>)
 8000272:	1b64      	subs	r4, r4, r5
 8000274:	10a4      	asrs	r4, r4, #2
 8000276:	2600      	movs	r6, #0
 8000278:	42a6      	cmp	r6, r4
 800027a:	d109      	bne.n	8000290 <__libc_init_array+0x24>
 800027c:	4d0b      	ldr	r5, [pc, #44]	@ (80002ac <__libc_init_array+0x40>)
 800027e:	4c0c      	ldr	r4, [pc, #48]	@ (80002b0 <__libc_init_array+0x44>)
 8000280:	f000 f818 	bl	80002b4 <_init>
 8000284:	1b64      	subs	r4, r4, r5
 8000286:	10a4      	asrs	r4, r4, #2
 8000288:	2600      	movs	r6, #0
 800028a:	42a6      	cmp	r6, r4
 800028c:	d105      	bne.n	800029a <__libc_init_array+0x2e>
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f855 3b04 	ldr.w	r3, [r5], #4
 8000294:	4798      	blx	r3
 8000296:	3601      	adds	r6, #1
 8000298:	e7ee      	b.n	8000278 <__libc_init_array+0xc>
 800029a:	f855 3b04 	ldr.w	r3, [r5], #4
 800029e:	4798      	blx	r3
 80002a0:	3601      	adds	r6, #1
 80002a2:	e7f2      	b.n	800028a <__libc_init_array+0x1e>
 80002a4:	080002cc 	.word	0x080002cc
 80002a8:	080002cc 	.word	0x080002cc
 80002ac:	080002cc 	.word	0x080002cc
 80002b0:	080002d0 	.word	0x080002d0

080002b4 <_init>:
 80002b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b6:	bf00      	nop
 80002b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ba:	bc08      	pop	{r3}
 80002bc:	469e      	mov	lr, r3
 80002be:	4770      	bx	lr

080002c0 <_fini>:
 80002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c2:	bf00      	nop
 80002c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c6:	bc08      	pop	{r3}
 80002c8:	469e      	mov	lr, r3
 80002ca:	4770      	bx	lr
