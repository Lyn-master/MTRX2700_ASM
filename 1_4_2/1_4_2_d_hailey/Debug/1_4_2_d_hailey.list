
1_4_2_d_hailey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  0800035c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  0800035c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0000135c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000360  08000360  00001360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000364  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002010  2**0
                  CONTENTS
 10 .bss          0000001c  20000010  20000010  00002010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00002010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000129  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a6  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  0000220f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  000022a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000000a5  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  0000238d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000344 	.word	0x08000344

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08000344 	.word	0x08000344

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4830      	ldr	r0, [pc, #192]	@ (8000298 <switch_vowels_consonants+0x6>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	@ 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	482e      	ldr	r0, [pc, #184]	@ (800029c <switch_vowels_consonants+0xa>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <button_loop>:

#include "definitions.s"

button_loop:
@ Check if the button (PA0) is pressed
    BL button_press
 80001ea:	f000 f807 	bl	80001fc <button_press>
    CMP R0, #1
 80001ee:	2801      	cmp	r0, #1
    BEQ button_pressed_action
 80001f0:	d002      	beq.n	80001f8 <button_pressed_action>

    @ Wait for a short delay to debounce
    BL delay_function
 80001f2:	f000 f817 	bl	8000224 <delay_function>

    @ Repeat the loop
    B button_loop
 80001f6:	e7f8      	b.n	80001ea <button_loop>

080001f8 <button_pressed_action>:


button_pressed_action:
    @ Wait for button release (simple debounce)
    BL button_release
 80001f8:	f000 f80d 	bl	8000216 <button_release>

080001fc <button_press>:

button_press:
	LDR R0, =GPIOA	@ port for the input button
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDR R1, [R0, IDR]
 8000200:	6901      	ldr	r1, [r0, #16]
	TST R1, 0x01
 8000202:	f011 0f01 	tst.w	r1, #1
	BEQ not_pressed
 8000206:	d000      	beq.n	800020a <not_pressed>
	BNE pressed
 8000208:	d102      	bne.n	8000210 <pressed>

0800020a <not_pressed>:

not_pressed:
	MOV R0, #0 @R0 = 0 meaning button hasnt been pressed
 800020a:	f04f 0000 	mov.w	r0, #0
	BX LR
 800020e:	4770      	bx	lr

08000210 <pressed>:

pressed:
	MOV R0, #1 @R0 = 1 meaning button has been pressed
 8000210:	f04f 0001 	mov.w	r0, #1
	BX LR
 8000214:	4770      	bx	lr

08000216 <button_release>:

button_release:
    BL delay_function
 8000216:	f000 f805 	bl	8000224 <delay_function>
    BL button_press
 800021a:	f7ff ffef 	bl	80001fc <button_press>
    CMP R0, #0 @check if button is still pressed or not
 800021e:	2800      	cmp	r0, #0
    BNE button_release @if still pressed begin loop again
 8000220:	d1f9      	bne.n	8000216 <button_release>
    BEQ switch_vowels_consonants @once button has been released changes number of vowels to consonants
 8000222:	d036      	beq.n	8000292 <switch_vowels_consonants>

08000224 <delay_function>:


delay_function:
	MOV R7, #0x03
 8000224:	f04f 0703 	mov.w	r7, #3

08000228 <not_finished_yet>:

	@ we continue to subtract one from R6 while the result is not zero,
	@ then return to where the delay_function was called
not_finished_yet:
	SUBS R7, 0x01
 8000228:	3f01      	subs	r7, #1
	BNE not_finished_yet
 800022a:	d1fd      	bne.n	8000228 <not_finished_yet>

	BX LR @ return from function call
 800022c:	4770      	bx	lr

0800022e <main>:
.text

@ this is the entry function called from the startup file
main:

	LDR R0, =ascii_string  @ the address of the string
 800022e:	481c      	ldr	r0, [pc, #112]	@ (80002a0 <switch_vowels_consonants+0xe>)
	LDR R2, =0x00 	@ counter to the current place in the string
 8000230:	f04f 0200 	mov.w	r2, #0
	LDR R6, =0 @counter to vowels detected
 8000234:	f04f 0600 	mov.w	r6, #0
	LDR R9, =0 @counter for letters (e.g. doesnt count punctuation characters)
 8000238:	f04f 0900 	mov.w	r9, #0

0800023c <string_loop>:

string_loop:

	LDRB R3, [R0, R2]	@ load the byte from the ascii_string (byte number R2)
 800023c:	5c83      	ldrb	r3, [r0, r2]
	STRB R3, [R1, R2]	@ store the byte in the string_buffer (byte number R2)
 800023e:	548b      	strb	r3, [r1, r2]
	CMP R3, #0	@ Test to see whether this byte is zero (for null terminated)
 8000240:	2b00      	cmp	r3, #0
	BEQ finished_string  @ if it was null (0) then jump out of the loop
 8000242:	d01c      	beq.n	800027e <finished_string>
	ORR R3, R3, #32	@convert letter to lowercase
 8000244:	f043 0320 	orr.w	r3, r3, #32
	LDR R5, =vowel_array
 8000248:	4d16      	ldr	r5, [pc, #88]	@ (80002a4 <switch_vowels_consonants+0x12>)
	BL letter_detecting @check if a letter
 800024a:	f000 f803 	bl	8000254 <letter_detecting>
	ADD R2, #1  @ increment the offset R2
 800024e:	f102 0201 	add.w	r2, r2, #1

	B string_loop  @ loop to the next byte
 8000252:	e7f3      	b.n	800023c <string_loop>

08000254 <letter_detecting>:

@check if letter above or equal to ascii value for a
letter_detecting:
	CMP R3, ASCII_a
 8000254:	2b61      	cmp	r3, #97	@ 0x61
	BHS lower_z @if it is check it is below or equal to ascii value for z
 8000256:	d200      	bcs.n	800025a <lower_z>
	BX LR @if not back to main loop and moves onto next character
 8000258:	4770      	bx	lr

0800025a <lower_z>:

lower_z:
	CMP R3, ASCII_z
 800025a:	2b7a      	cmp	r3, #122	@ 0x7a
	BLS vowel_detecting @if it is a letter bracnhes to vowel_detecting
 800025c:	d900      	bls.n	8000260 <vowel_detecting>
	BX LR @if not back to main loop and moves onto next character
 800025e:	4770      	bx	lr

08000260 <vowel_detecting>:

vowel_detecting:

	LDRB R8, [R5], #1 @load vowel from array and move to next
 8000260:	f815 8b01 	ldrb.w	r8, [r5], #1
	CMP R8, #0 @check not end of vowel array
 8000264:	f1b8 0f00 	cmp.w	r8, #0
	BEQ no_vowel
 8000268:	d004      	beq.n	8000274 <no_vowel>
	CMP R3, R8 @check if vowel
 800026a:	4543      	cmp	r3, r8
	BEQ found_vowel
 800026c:	d000      	beq.n	8000270 <found_vowel>
	B vowel_detecting @run loop again
 800026e:	e7f7      	b.n	8000260 <vowel_detecting>

08000270 <found_vowel>:

found_vowel:
	ADD R6, #1
 8000270:	f106 0601 	add.w	r6, r6, #1

08000274 <no_vowel>:

no_vowel:
	MOV R8, #0  @ Clear R8
 8000274:	f04f 0800 	mov.w	r8, #0
	ADD R9, #1 @if between a-z increase R9 - increasing letter count
 8000278:	f109 0901 	add.w	r9, r9, #1
	BX LR
 800027c:	4770      	bx	lr

0800027e <finished_string>:

finished_string:

	@ Branch with link to set the clocks for the I/O and UART
	BL enable_peripheral_clocks
 800027e:	f7ff ffa9 	bl	80001d4 <enable_peripheral_clocks>

	@ Once the clocks are started, need to initialise the discovery board I/O
	BL initialise_discovery_board
 8000282:	f7ff ffad 	bl	80001e0 <initialise_discovery_board>

	LDR R0, =GPIOE  @ load the address of the GPIOE register into R0
 8000286:	4805      	ldr	r0, [pc, #20]	@ (800029c <switch_vowels_consonants+0xa>)
	STRB R6, [R0, #ODR + 1]   @ store this to the second byte of the ODR (bits 8-15)
 8000288:	7546      	strb	r6, [r0, #21]
	B finished_everything
 800028a:	e7ff      	b.n	800028c <finished_everything>

0800028c <finished_everything>:


finished_everything:
	BL button_loop @loops waiting for button press
 800028c:	f7ff ffad 	bl	80001ea <button_loop>

	B finished_everything 	@ infinite loop here
 8000290:	e7fc      	b.n	800028c <finished_everything>

08000292 <switch_vowels_consonants>:

switch_vowels_consonants:
	SUB R6, R9, R6 @subtracting the number of vowels/consonants from number of letters
 8000292:	eba9 0606 	sub.w	r6, r9, r6
	B finished_string
 8000296:	e7f2      	b.n	800027e <finished_string>
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000298:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800029c:	48001000 	.word	0x48001000
	LDR R0, =ascii_string  @ the address of the string
 80002a0:	20000000 	.word	0x20000000
	LDR R5, =vowel_array
 80002a4:	20000008 	.word	0x20000008

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	@ (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffa8 	bl	800022e <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000334 <__libc_init_array+0x38>)
 8000300:	4c0d      	ldr	r4, [pc, #52]	@ (8000338 <__libc_init_array+0x3c>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	2600      	movs	r6, #0
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	4d0b      	ldr	r5, [pc, #44]	@ (800033c <__libc_init_array+0x40>)
 800030e:	4c0c      	ldr	r4, [pc, #48]	@ (8000340 <__libc_init_array+0x44>)
 8000310:	f000 f818 	bl	8000344 <_init>
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	2600      	movs	r6, #0
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
