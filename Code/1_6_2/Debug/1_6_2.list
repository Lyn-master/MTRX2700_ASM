
1_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000013cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000013cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013cc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000015b  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000091  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00001678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000087  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003ac 	.word	0x080003ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003ac 	.word	0x080003ac

080001d4 <enable_timer2_clock>:
.text
@ define code

enable_timer2_clock:

	LDR R0, =RCC	@ load the base address for the timer
 80001d4:	484b      	ldr	r0, [pc, #300]	@ (8000304 <main+0x12>)
	LDR R1, [R0, APB1ENR] 	@ load the peripheral clock control register
 80001d6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN @ store a 1 in bit for the TIM2 enable flag
 80001d8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR] @ enable the timer
 80001dc:	61c1      	str	r1, [r0, #28]
	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <enable_peripheral_clocks>:


@ function to enable the clocks for the peripherals we are using (A, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001e0:	4848      	ldr	r0, [pc, #288]	@ (8000304 <main+0x12>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001e2:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 80001e4:	f441 1128 	orr.w	r1, r1, #2752512	@ 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001e8:	6141      	str	r1, [r0, #20]
	BX LR @ return
 80001ea:	4770      	bx	lr

080001ec <initialise_discovery_board>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001ec:	4846      	ldr	r0, [pc, #280]	@ (8000308 <main+0x16>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001f2:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001f4:	4770      	bx	lr

080001f6 <trigger_prescaler>:

	@ In your code, you should be using the ARR register to
	@ set the maximum count for the timer

	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 80001f6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

	LDR R1, =0x1 @ make the timer overflow after counting to only 1
 80001fa:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_ARR] @ set the ARR register
 80001fe:	62c1      	str	r1, [r0, #44]	@ 0x2c

	LDR R8, =0x00
 8000200:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT] @ reset the clock
 8000204:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
	NOP
 8000208:	bf00      	nop
	NOP
 800020a:	bf00      	nop

	LDR R1, =0xffffffff @ set the ARR back to the default value
 800020c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
	STR R1, [R0, TIM_ARR] @ set the ARR register
 8000210:	62c1      	str	r1, [r0, #44]	@ 0x2c

	BX LR
 8000212:	4770      	bx	lr

08000214 <delay_function>:
@ define code

@ function entry for part a
delay_function:

	LDR R0, =8 @ with a system clock of 8MHz each microsecond is 8 clock cycles
 8000214:	f04f 0008 	mov.w	r0, #8
	MUL R3, R1, R0 @ Converting delay time from microseconds into number of ticks
 8000218:	fb01 f300 	mul.w	r3, r1, r0

	@ store the number of times timer needs to count in the Auto-Reload Register
	LDR R0, =TIM2
 800021c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	STR R3, [R0, #TIM_ARR]
 8000220:	62c3      	str	r3, [r0, #44]	@ 0x2c

	@ Branch to start the timer
	B enable_timer
 8000222:	e7ff      	b.n	8000224 <enable_timer>

08000224 <enable_timer>:

@ function to clear any flags, reset timer count and start the timer
enable_timer:

	LDR R0, =TIM2
 8000224:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

	@ Reset the counter and start the timer
	LDR R5, =0
 8000228:	f04f 0500 	mov.w	r5, #0
    STR R5, [R0, #TIM_CNT]  @ Reset the timer counter to 0
 800022c:	6245      	str	r5, [r0, #36]	@ 0x24
    STR R5, [R0, #TIM_SR]	@ clear the timer Status Register
 800022e:	6105      	str	r5, [r0, #16]
    LDR R5, =1
 8000230:	f04f 0501 	mov.w	r5, #1
    STR R5, [R0, #TIM_CR1]  @ Enable the timer (TIM2)
 8000234:	6005      	str	r5, [r0, #0]

	B wait_for_delay
 8000236:	e7ff      	b.n	8000238 <wait_for_delay>

08000238 <wait_for_delay>:

@ function to check when the timer overflows and branch to action
wait_for_delay:

	LDR R0, =TIM2
 8000238:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R6, [R0, #TIM_SR] @ load the Status Register
 800023c:	6906      	ldr	r6, [r0, #16]
	CMP R6, #0x1f @ when timer overflows it will set the flags to indicate it has finished one cycle
 800023e:	2e1f      	cmp	r6, #31
	BEQ turn_on_led
 8000240:	d000      	beq.n	8000244 <turn_on_led>
	B wait_for_delay @ keep checking if unfinished
 8000242:	e7f9      	b.n	8000238 <wait_for_delay>

08000244 <turn_on_led>:

@ function to blink LEDs to visualise delays
turn_on_led:

	LDR R0, =TIM2
 8000244:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

	@ clear the Status Register so it can keep getting flagged for next cycle
	LDR R7, =0
 8000248:	f04f 0700 	mov.w	r7, #0
	STR R7, [R0, #TIM_SR]
 800024c:	6107      	str	r7, [r0, #16]

	@ block to blink LED
	LDR R0, =GPIOE
 800024e:	482e      	ldr	r0, [pc, #184]	@ (8000308 <main+0x16>)
	LDR R1, [R0, #ODR + 1] @ load current LED pattern
 8000250:	f8d0 1015 	ldr.w	r1, [r0, #21]
	EOR R1, R1, #0b10101010 @ turn on/off every second LED
 8000254:	f081 01aa 	eor.w	r1, r1, #170	@ 0xaa
	STR R1, [R0, #ODR + 1]
 8000258:	f8c0 1015 	str.w	r1, [r0, #21]

	B wait_for_delay @ keep waiting for next cycle
 800025c:	e7ec      	b.n	8000238 <wait_for_delay>

0800025e <microsecond_delay>:

@ the next three function blocks are for calculations only
microsecond_delay:

	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 800025e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =7 @ for 1 microsecond ticks we need clock at 1MHz so 8MHz/(1+7) = 1MHz
 8000262:	f04f 0107 	mov.w	r1, #7
	STR R1, [R0, #TIM_PSC] @ set the prescaler register
 8000266:	6281      	str	r1, [r0, #40]	@ 0x28

	BL trigger_prescaler
 8000268:	f7ff ffc5 	bl	80001f6 <trigger_prescaler>

	LDR R3, =1 @ we want to flag after 1 tick = 1 microsecond
 800026c:	f04f 0301 	mov.w	r3, #1
	STR R3, [R0, #TIM_ARR]
 8000270:	62c3      	str	r3, [r0, #44]	@ 0x2c

	B enable_timer
 8000272:	e7d7      	b.n	8000224 <enable_timer>

08000274 <second_delay>:

second_delay:

	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 8000274:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =7999 @ modifying clock to 8MHz / (1+7999) = 1kHz
 8000278:	f641 713f 	movw	r1, #7999	@ 0x1f3f
	STR R1, [R0, #TIM_PSC] @ set the prescaler register
 800027c:	6281      	str	r1, [r0, #40]	@ 0x28

	BL trigger_prescaler
 800027e:	f7ff ffba 	bl	80001f6 <trigger_prescaler>

	LDR R3, =1000 @ we want to flag after 1000 ticks = 1000 x 1 ms = 1s
 8000282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	STR R3, [R0, #TIM_ARR]
 8000286:	62c3      	str	r3, [r0, #44]	@ 0x2c

	B enable_timer
 8000288:	e7cc      	b.n	8000224 <enable_timer>

0800028a <hour_delay>:

hour_delay:

	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 800028a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =7999 @ for 1 ms ticks we need clock at 1kHz so 8MHz/(1+7999) = 1kHz
 800028e:	f641 713f 	movw	r1, #7999	@ 0x1f3f
	STR R1, [R0, #TIM_PSC] @ set the prescaler register
 8000292:	6281      	str	r1, [r0, #40]	@ 0x28

	BL trigger_prescaler
 8000294:	f7ff ffaf 	bl	80001f6 <trigger_prescaler>

	LDR R3, =3600000 @ 60min x 60s x 1000 = 3600000ms
 8000298:	4b1c      	ldr	r3, [pc, #112]	@ (800030c <main+0x1a>)
	STR R3, [R0, #TIM_ARR]
 800029a:	62c3      	str	r3, [r0, #44]	@ 0x2c

	B enable_timer
 800029c:	e7c2      	b.n	8000224 <enable_timer>

0800029e <millisecond_delay>:


@ function entry for the 0.1ms delay required in part b
millisecond_delay:

	LDR R0, =TIM2
 800029e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =799 @ we want a tick of 0.1ms = 100 microsecond so the clock rate should be 10kHz
 80002a2:	f240 311f 	movw	r1, #799	@ 0x31f
	STR R1, [R0, #TIM_PSC] @ set the prescaler
 80002a6:	6281      	str	r1, [r0, #40]	@ 0x28

	@ start the timer to trigger prescaler
	LDR R1, =1
 80002a8:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, #TIM_CR1]
 80002ac:	6001      	str	r1, [r0, #0]

	BL trigger_prescaler
 80002ae:	f7ff ffa2 	bl	80001f6 <trigger_prescaler>

	@ stop the timer
	LDR R0, =TIM2
 80002b2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =0
 80002b6:	f04f 0100 	mov.w	r1, #0
	STR R1, [R0, #TIM_CR1]
 80002ba:	6001      	str	r1, [r0, #0]

	@ set the Auto-Reload Register so we can better visualise the delay
	LDR R3, =10000 @ 10000 counts for 1s delays
 80002bc:	f242 7310 	movw	r3, #10000	@ 0x2710
	STR R3, [R0, #TIM_ARR]
 80002c0:	62c3      	str	r3, [r0, #44]	@ 0x2c

	B enable_timer
 80002c2:	e7af      	b.n	8000224 <enable_timer>

080002c4 <delay>:


@ entry function for part c
delay:

	LDR R0, =TIM2
 80002c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

	@ enable ARPE
	LDR R1, [R0]
 80002c8:	6801      	ldr	r1, [r0, #0]
	ORR R1, R1, #0b10000000 @ set bit 7 (ARPE) to 1
 80002ca:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
	STR R1, [R0]
 80002ce:	6001      	str	r1, [r0, #0]

	@ set prescaler and start timer to trigger prescaler
	LDR R1, =7999 @ we want a tick of 1ms or 1kHz = 8000kHz/ (7999+1)
 80002d0:	f641 713f 	movw	r1, #7999	@ 0x1f3f
	STR R1, [R0, #TIM_PSC] @ set the prescaler register
 80002d4:	6281      	str	r1, [r0, #40]	@ 0x28
	LDR R1, =1
 80002d6:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, #TIM_CR1]
 80002da:	6001      	str	r1, [r0, #0]

	BL trigger_prescaler
 80002dc:	f7ff ff8b 	bl	80001f6 <trigger_prescaler>

	@ stop timer
	LDR R0, =TIM2
 80002e0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =0
 80002e4:	f04f 0100 	mov.w	r1, #0
	STR R1, [R0, #TIM_CR1]
 80002e8:	6001      	str	r1, [r0, #0]

	@ set the Auto-Reload Register to our delay value
	LDR R3, =500 @ 500 x 1ms = 500ms delay
 80002ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
	STR R3, [R0, #TIM_ARR]
 80002ee:	62c3      	str	r3, [r0, #44]	@ 0x2c

	B enable_timer
 80002f0:	e798      	b.n	8000224 <enable_timer>

080002f2 <main>:

@ this is the entry function called from the startup file
main:

	# initialisation
	BL enable_timer2_clock
 80002f2:	f7ff ff6f 	bl	80001d4 <enable_timer2_clock>
	BL enable_peripheral_clocks
 80002f6:	f7ff ff73 	bl	80001e0 <enable_peripheral_clocks>
	BL initialise_discovery_board
 80002fa:	f7ff ff77 	bl	80001ec <initialise_discovery_board>

	@ un comment these two lines for part a to store desired delay time in R1
	@LDR R1, =delay_time
	@LDR R1, [R1]

	BL delay
 80002fe:	f7ff ffe1 	bl	80002c4 <delay>
 8000302:	0000      	.short	0x0000
	LDR R0, =RCC	@ load the base address for the timer
 8000304:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000308:	48001000 	.word	0x48001000
	LDR R3, =3600000 @ 60min x 60s x 1000 = 3600000ms
 800030c:	0036ee80 	.word	0x0036ee80

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffd6 	bl	80002f2 <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC1_2_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	@ (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	@ (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	@ (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	@ (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
