
1_4_2_c_Johnny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800039c  080003a4  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800039c  0800039c  000013a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800039c  0800039c  000013a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800039c  080003a4  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800039c  0800039c  0000139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003a0  080003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013a4  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000013c  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007f  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00001620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000090  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000384 	.word	0x08000384

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000384 	.word	0x08000384

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4841      	ldr	r0, [pc, #260]	@ (80002dc <delay_function+0x1e>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	@ 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	483f      	ldr	r0, [pc, #252]	@ (80002e0 <delay_function+0x22>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <enable_timer2_clock>:

enable_timer2_clock:

	LDR R0, =RCC	@ load the base address for the timer
 80001ea:	483c      	ldr	r0, [pc, #240]	@ (80002dc <delay_function+0x1e>)
	LDR R1, [R0, APB1ENR] 	@ load the peripheral clock control register
 80001ec:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN @ store a 1 in bit for the TIM2 enable flag
 80001ee:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR] @ enable the timer
 80001f2:	61c1      	str	r1, [r0, #28]
	BX LR @ return
 80001f4:	4770      	bx	lr

080001f6 <initialise_timer>:

initialise_timer:
	LDR R0, =TIM2
 80001f6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

	LDR R1, =7999
 80001fa:	f641 713f 	movw	r1, #7999	@ 0x1f3f
	STR R1, [R0, #TIM_PSC]
 80001fe:	6281      	str	r1, [r0, #40]	@ 0x28

	@ store a value for the prescaler
	LDR R1, =0x1 @ make the timer overflow after counting to only 1
 8000200:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_ARR] @ set the ARR register
 8000204:	62c1      	str	r1, [r0, #44]	@ 0x2c
	STR R1, [R0, TIM_CR1]
 8000206:	6001      	str	r1, [r0, #0]

	LDR R8, =0x00
 8000208:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT] @ reset the clock
 800020c:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
	NOP
 8000210:	bf00      	nop
	NOP
 8000212:	bf00      	nop

	@ Reset the counter and stop the timer
	LDR R5, =0
 8000214:	f04f 0500 	mov.w	r5, #0
	STR R5, [R0, #TIM_CR1]  @ stop the timer (TIM2)
 8000218:	6005      	str	r5, [r0, #0]
    STR R5, [R0, #TIM_CNT]  @ Reset the timer counter to 0
 800021a:	6245      	str	r5, [r0, #36]	@ 0x24
    STR R5, [R0, #TIM_SR]	@ clear the timer Status Register
 800021c:	6105      	str	r5, [r0, #16]

	BX LR
 800021e:	4770      	bx	lr

08000220 <main>:

.text

@ this is the entry function called from the startup file
main:
	MOV R5, #0
 8000220:	f04f 0500 	mov.w	r5, #0

	@ Branch with link to set the clocks for the I/O and UART
	BL enable_peripheral_clocks
 8000224:	f7ff ffd6 	bl	80001d4 <enable_peripheral_clocks>

	@ Once the clocks are started, need to initialise the discovery board I/O
	BL initialise_discovery_board
 8000228:	f7ff ffda 	bl	80001e0 <initialise_discovery_board>

	BL enable_timer2_clock
 800022c:	f7ff ffdd 	bl	80001ea <enable_timer2_clock>

	BL initialise_timer
 8000230:	f7ff ffe1 	bl	80001f6 <initialise_timer>

08000234 <set_LED_pattern>:

@part a: set LEDs to the bit mask pattern provided
set_LED_pattern:

	LDR R1, =0b00000000 @bit mask for pattern of LEDs
 8000234:	f04f 0100 	mov.w	r1, #0
	LDR R0, =GPIOE  @ load the address of the GPIOE register into R0
 8000238:	4829      	ldr	r0, [pc, #164]	@ (80002e0 <delay_function+0x22>)
  	STRB R1, [R0, #ODR + 1]   @ store this to the second byte of the ODR (bits 8-15), hence lighting the LEDs
 800023a:	7541      	strb	r1, [r0, #21]

0800023c <program_loop>:


@parts b and c: light up one additional LED with each button press nttil all 8 are lit then decrease one LED with each button press
program_loop:
@ Check if the button (PA0) is pressed
    BL button_press
 800023c:	f000 f80a 	bl	8000254 <button_press>
    CMP R0, #1 @check state of button from button_press
 8000240:	2801      	cmp	r0, #1
    BEQ button_pressed_action
 8000242:	d002      	beq.n	800024a <button_pressed_action>

    @ Wait for a short delay to debounce
    BL delay_function
 8000244:	f000 f83b 	bl	80002be <delay_function>

    @ Repeat the loop
    B program_loop
 8000248:	e7f8      	b.n	800023c <program_loop>

0800024a <button_pressed_action>:

@ function to perform actions once the button is pressed
button_pressed_action:
    @ Increment LED count
    BL led_check
 800024a:	f000 f818 	bl	800027e <led_check>

    @ Wait for button release (simple debounce)
    BL button_release
 800024e:	f000 f80f 	bl	8000270 <button_release>

    @ Continue looping
    B program_loop
 8000252:	e7f3      	b.n	800023c <program_loop>

08000254 <button_press>:

@ function to check status of button and update flags based on the current state
button_press:
	LDR R0, =GPIOA	@ port for the input button
 8000254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDR R1, [R0, #IDR] @load state of button to R1
 8000258:	6901      	ldr	r1, [r0, #16]
	TST R1, 0x01 @check if button pressed or not
 800025a:	f011 0f01 	tst.w	r1, #1
	BEQ not_pressed
 800025e:	d001      	beq.n	8000264 <not_pressed>
	BNE pressed
 8000260:	d103      	bne.n	800026a <pressed>

	BX LR
 8000262:	4770      	bx	lr

08000264 <not_pressed>:

	@ functions to update the button status flag
	not_pressed:
		MOV R0, #0
 8000264:	f04f 0000 	mov.w	r0, #0
		BX LR
 8000268:	4770      	bx	lr

0800026a <pressed>:

	pressed:
		MOV R0, #1
 800026a:	f04f 0001 	mov.w	r0, #1
		BX LR
 800026e:	4770      	bx	lr

08000270 <button_release>:

@ function to debounce the button and register held down button as one button press
button_release:
    BL delay_function
 8000270:	f000 f825 	bl	80002be <delay_function>
    BL button_press 		@check button has been released yet
 8000274:	f7ff ffee 	bl	8000254 <button_press>
    CMP R0, #0
 8000278:	2800      	cmp	r0, #0
    BNE button_release
 800027a:	d1f9      	bne.n	8000270 <button_release>
    BEQ program_loop
 800027c:	d0de      	beq.n	800023c <program_loop>

0800027e <led_check>:

@ function to determine whether number of LEDs lit should increase or decrease
led_check:
	CMP R5, #0 				@check if currently increasing or decreasing LEDs
 800027e:	2d00      	cmp	r5, #0
	BEQ increment_leds
 8000280:	d000      	beq.n	8000284 <increment_leds>
	BNE reduce_leds
 8000282:	d10b      	bne.n	800029c <reduce_leds>

08000284 <increment_leds>:

@ Increment the LED count
increment_leds:
    LDR R0, =led_count      @ Load address of led_count variable
 8000284:	4817      	ldr	r0, [pc, #92]	@ (80002e4 <delay_function+0x26>)
    LDR R1, [R0]            @ Load the current LED count
 8000286:	6801      	ldr	r1, [r0, #0]
    LSL R1, R1, #1
 8000288:	ea4f 0141 	mov.w	r1, r1, lsl #1
    ADD R1, R1, #1          @ Increment the LED count
 800028c:	f101 0101 	add.w	r1, r1, #1
    CMP R1, #0xFF           @ Maximum 8 LEDs (PE8 to PE15)
 8000290:	29ff      	cmp	r1, #255	@ 0xff
    BEQ led_full
 8000292:	d000      	beq.n	8000296 <led_full>
    B light_up_leds
 8000294:	e00c      	b.n	80002b0 <light_up_leds>

08000296 <led_full>:
    @MOV R1, #0              @ Reset if more than 8 LEDs

@ updates flag for indicating it should start descreasing number of LEDs lit
led_full:
	MOV R5, #1 				@change to now decreasing LEDs
 8000296:	f04f 0501 	mov.w	r5, #1
	B light_up_leds
 800029a:	e009      	b.n	80002b0 <light_up_leds>

0800029c <reduce_leds>:

@ function to dim one more LED
reduce_leds:
	LDR R0, =led_count 		@ Load address of led_count variable
 800029c:	4811      	ldr	r0, [pc, #68]	@ (80002e4 <delay_function+0x26>)
    LDR R1, [R0]            @ Load the current LED count
 800029e:	6801      	ldr	r1, [r0, #0]
	LSR R1, R1, #1
 80002a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
	CMP R1, #0
 80002a4:	2900      	cmp	r1, #0
	BEQ led_empty @ update flag to indicate it should increase number of LEDs lit next time
 80002a6:	d000      	beq.n	80002aa <led_empty>
	B light_up_leds
 80002a8:	e002      	b.n	80002b0 <light_up_leds>

080002aa <led_empty>:

@ updates flag for indicating it should start increasing number of LEDs lit
led_empty:
	MOV R5, #0
 80002aa:	f04f 0500 	mov.w	r5, #0
	B light_up_leds
 80002ae:	e7ff      	b.n	80002b0 <light_up_leds>

080002b0 <light_up_leds>:

@ function to light up one more LED
light_up_leds:
    STR R1, [R0]            @ Store the updated LED count
 80002b0:	6001      	str	r1, [r0, #0]
    @ Control LEDs based on the count (PE8 to PE15)
    LDR R0, =GPIOE          @ Load the address of GPIOE
 80002b2:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <delay_function+0x22>)
    LDR R2, =led_count      @ Load address of led_count
 80002b4:	4a0b      	ldr	r2, [pc, #44]	@ (80002e4 <delay_function+0x26>)
    LDR R1, [R2]            @ Load the current LED count
 80002b6:	6811      	ldr	r1, [r2, #0]
    STR R1, [R0, #ODR + 1]      @ Store the value in the ODR register to turn LEDs on/off
 80002b8:	f8c0 1015 	str.w	r1, [r0, #21]
    BX LR
 80002bc:	4770      	bx	lr

080002be <delay_function>:

@	BX LR @ return from function call


delay_function:
	LDR R0, =TIM2
 80002be:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =1
 80002c2:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, #TIM_CR1]
 80002c6:	6001      	str	r1, [r0, #0]
	LDR R6, [R0, #TIM_SR] @ load the Status Register
 80002c8:	6906      	ldr	r6, [r0, #16]
	CMP R6, #0x1f @ when timer overflows it will set the flags to indicate it has finished one cycle
 80002ca:	2e1f      	cmp	r6, #31
	BNE delay_function @ keep checking if unfinished
 80002cc:	d1f7      	bne.n	80002be <delay_function>
	LDR R1, =0
 80002ce:	f04f 0100 	mov.w	r1, #0
	STR R1, [R0, #TIM_CR1]
 80002d2:	6001      	str	r1, [r0, #0]
	STR R1, [R0, #TIM_CNT]
 80002d4:	6241      	str	r1, [r0, #36]	@ 0x24
	STR R1, [R0, #TIM_SR]
 80002d6:	6101      	str	r1, [r0, #16]
	BX LR
 80002d8:	4770      	bx	lr
 80002da:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80002dc:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80002e0:	48001000 	.word	0x48001000
    LDR R0, =led_count      @ Load address of led_count variable
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	@ (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	@ (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	@ (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	@ (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 f811 	bl	800033c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031a:	f7ff ff81 	bl	8000220 <main>

0800031e <LoopForever>:

LoopForever:
  b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800032c:	080003a4 	.word	0x080003a4
  ldr r2, =_sbss
 8000330:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000334:	20000024 	.word	0x20000024

08000338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC1_2_IRQHandler>
	...

0800033c <__libc_init_array>:
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4d0d      	ldr	r5, [pc, #52]	@ (8000374 <__libc_init_array+0x38>)
 8000340:	4c0d      	ldr	r4, [pc, #52]	@ (8000378 <__libc_init_array+0x3c>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	2600      	movs	r6, #0
 8000348:	42a6      	cmp	r6, r4
 800034a:	d109      	bne.n	8000360 <__libc_init_array+0x24>
 800034c:	4d0b      	ldr	r5, [pc, #44]	@ (800037c <__libc_init_array+0x40>)
 800034e:	4c0c      	ldr	r4, [pc, #48]	@ (8000380 <__libc_init_array+0x44>)
 8000350:	f000 f818 	bl	8000384 <_init>
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	2600      	movs	r6, #0
 800035a:	42a6      	cmp	r6, r4
 800035c:	d105      	bne.n	800036a <__libc_init_array+0x2e>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f855 3b04 	ldr.w	r3, [r5], #4
 8000364:	4798      	blx	r3
 8000366:	3601      	adds	r6, #1
 8000368:	e7ee      	b.n	8000348 <__libc_init_array+0xc>
 800036a:	f855 3b04 	ldr.w	r3, [r5], #4
 800036e:	4798      	blx	r3
 8000370:	3601      	adds	r6, #1
 8000372:	e7f2      	b.n	800035a <__libc_init_array+0x1e>
 8000374:	0800039c 	.word	0x0800039c
 8000378:	0800039c 	.word	0x0800039c
 800037c:	0800039c 	.word	0x0800039c
 8000380:	080003a0 	.word	0x080003a0

08000384 <_init>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr

08000390 <_fini>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr
