
1_3_2_c_Lyn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000140  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d4  080002d4  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d4  080002d4  00002008  2**0
                  CONTENTS
  4 .ARM          00000000  080002d4  080002d4  00002008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d4  080002d4  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d4  080002d4  000012d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002d8  080002d8  000012d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080002dc  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00002008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000e7  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000006f  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000054  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000021e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000008b  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000022f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002bc 	.word	0x080002bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080002bc 	.word	0x080002bc

080001d4 <main>:

.text

main:

LDR R1, = ascii_string @Memory address of string
 80001d4:	4911      	ldr	r1, [pc, #68]	@ (800021c <end_loop+0x4>)

MOV R2, #3 @ Value for right shift
 80001d6:	f04f 0203 	mov.w	r2, #3

Mov R3, #0 @ Offset for incrementation
 80001da:	f04f 0300 	mov.w	r3, #0

080001de <string_loop>:



string_loop:

LDRB R4, [R1, R3]
 80001de:	5ccc      	ldrb	r4, [r1, r3]
CMP R4, #0                 @ Check end of string
 80001e0:	2c00      	cmp	r4, #0
BEQ end_loop
 80001e2:	d019      	beq.n	8000218 <end_loop>



@ Check if in alphabet range A = 65 Z = 90 a = 97 z = 122

CMP R4, #65
 80001e4:	2c41      	cmp	r4, #65	@ 0x41
BLT next_letter
 80001e6:	db14      	blt.n	8000212 <next_letter>

CMP R4, #122
 80001e8:	2c7a      	cmp	r4, #122	@ 0x7a
BGT next_letter
 80001ea:	dc12      	bgt.n	8000212 <next_letter>

@ Upper case range 65<= # < 91
CMP R4, #91
 80001ec:	2c5b      	cmp	r4, #91	@ 0x5b
BLT upper_case
 80001ee:	db03      	blt.n	80001f8 <upper_case>

@ Invalid case range 91 <= # <= 96

CMP R4, #96
 80001f0:	2c60      	cmp	r4, #96	@ 0x60
BLE next_letter
 80001f2:	dd0e      	ble.n	8000212 <next_letter>

@ Lower case range 97 <= # <= 122
CMP R4, #97
 80001f4:	2c61      	cmp	r4, #97	@ 0x61
BGE lower_case
 80001f6:	da05      	bge.n	8000204 <lower_case>

080001f8 <upper_case>:


upper_case:

ADD R4, R2
 80001f8:	4414      	add	r4, r2
CMP R4, #90
 80001fa:	2c5a      	cmp	r4, #90	@ 0x5a
BLE update_str
 80001fc:	dd08      	ble.n	8000210 <update_str>
SUB R4, R4, #26
 80001fe:	f1a4 041a 	sub.w	r4, r4, #26
B update_str
 8000202:	e005      	b.n	8000210 <update_str>

08000204 <lower_case>:

lower_case:
ADD R4, R2
 8000204:	4414      	add	r4, r2
CMP R4, #122
 8000206:	2c7a      	cmp	r4, #122	@ 0x7a
BLE update_str
 8000208:	dd02      	ble.n	8000210 <update_str>
SUB R4, R4, #26
 800020a:	f1a4 041a 	sub.w	r4, r4, #26
B update_str
 800020e:	e7ff      	b.n	8000210 <update_str>

08000210 <update_str>:



update_str:
STRB R4, [R1,R3]  @store in current place of string
 8000210:	54cc      	strb	r4, [r1, r3]

08000212 <next_letter>:

next_letter:

@Increment and restart loop

ADD R3, #1
 8000212:	f103 0301 	add.w	r3, r3, #1
b string_loop
 8000216:	e7e2      	b.n	80001de <string_loop>

08000218 <end_loop>:



end_loop:

BX LR   @ Return from main
 8000218:	4770      	bx	lr
 800021a:	0000      	.short	0x0000
LDR R1, = ascii_string @Memory address of string
 800021c:	20000000 	.word	0x20000000

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	@ (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000224:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	@ (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	@ (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	@ (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	@ (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	@ (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 f811 	bl	8000274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ffbf 	bl	80001d4 <main>

08000256 <LoopForever>:

LoopForever:
  b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000264:	080002dc 	.word	0x080002dc
  ldr r2, =_sbss
 8000268:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800026c:	20000024 	.word	0x20000024

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>
	...

08000274 <__libc_init_array>:
 8000274:	b570      	push	{r4, r5, r6, lr}
 8000276:	4d0d      	ldr	r5, [pc, #52]	@ (80002ac <__libc_init_array+0x38>)
 8000278:	4c0d      	ldr	r4, [pc, #52]	@ (80002b0 <__libc_init_array+0x3c>)
 800027a:	1b64      	subs	r4, r4, r5
 800027c:	10a4      	asrs	r4, r4, #2
 800027e:	2600      	movs	r6, #0
 8000280:	42a6      	cmp	r6, r4
 8000282:	d109      	bne.n	8000298 <__libc_init_array+0x24>
 8000284:	4d0b      	ldr	r5, [pc, #44]	@ (80002b4 <__libc_init_array+0x40>)
 8000286:	4c0c      	ldr	r4, [pc, #48]	@ (80002b8 <__libc_init_array+0x44>)
 8000288:	f000 f818 	bl	80002bc <_init>
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	10a4      	asrs	r4, r4, #2
 8000290:	2600      	movs	r6, #0
 8000292:	42a6      	cmp	r6, r4
 8000294:	d105      	bne.n	80002a2 <__libc_init_array+0x2e>
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	f855 3b04 	ldr.w	r3, [r5], #4
 800029c:	4798      	blx	r3
 800029e:	3601      	adds	r6, #1
 80002a0:	e7ee      	b.n	8000280 <__libc_init_array+0xc>
 80002a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a6:	4798      	blx	r3
 80002a8:	3601      	adds	r6, #1
 80002aa:	e7f2      	b.n	8000292 <__libc_init_array+0x1e>
 80002ac:	080002d4 	.word	0x080002d4
 80002b0:	080002d4 	.word	0x080002d4
 80002b4:	080002d4 	.word	0x080002d4
 80002b8:	080002d8 	.word	0x080002d8

080002bc <_init>:
 80002bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002be:	bf00      	nop
 80002c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c2:	bc08      	pop	{r3}
 80002c4:	469e      	mov	lr, r3
 80002c6:	4770      	bx	lr

080002c8 <_fini>:
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ca:	bf00      	nop
 80002cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ce:	bc08      	pop	{r3}
 80002d0:	469e      	mov	lr, r3
 80002d2:	4770      	bx	lr
